// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: states.sql

package sqlc

import (
	"context"
)

type BulkInsertStateCostsParams struct {
	State          string
	AirCost        float64
	BusCostInter   float64
	BusCostIntra   float64
	MotorcycleCost float64
	WaterCost      float64
}

const getStateCost = `-- name: GetStateCost :one
SELECT state, air_cost, bus_cost_inter, bus_cost_intra, motorcycle_cost, water_cost FROM states_cost
WHERE State = $1
`

func (q *Queries) GetStateCost(ctx context.Context, state string) (StatesCost, error) {
	row := q.db.QueryRow(ctx, getStateCost, state)
	var i StatesCost
	err := row.Scan(
		&i.State,
		&i.AirCost,
		&i.BusCostInter,
		&i.BusCostIntra,
		&i.MotorcycleCost,
		&i.WaterCost,
	)
	return i, err
}

const listStatesCosts = `-- name: ListStatesCosts :many
SELECT state, air_cost, bus_cost_inter, bus_cost_intra, motorcycle_cost, water_cost FROM states_cost
ORDER BY State
`

func (q *Queries) ListStatesCosts(ctx context.Context) ([]StatesCost, error) {
	rows, err := q.db.Query(ctx, listStatesCosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StatesCost
	for rows.Next() {
		var i StatesCost
		if err := rows.Scan(
			&i.State,
			&i.AirCost,
			&i.BusCostInter,
			&i.BusCostIntra,
			&i.MotorcycleCost,
			&i.WaterCost,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
