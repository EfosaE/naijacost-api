// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: copyfrom.go

package sqlc

import (
	"context"
)

// iteratorForBulkInsertStateCosts implements pgx.CopyFromSource.
type iteratorForBulkInsertStateCosts struct {
	rows                 []BulkInsertStateCostsParams
	skippedFirstNextCall bool
}

func (r *iteratorForBulkInsertStateCosts) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBulkInsertStateCosts) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].State,
		r.rows[0].AirCost,
		r.rows[0].BusCostInter,
		r.rows[0].BusCostIntra,
		r.rows[0].MotorcycleCost,
		r.rows[0].WaterCost,
	}, nil
}

func (r iteratorForBulkInsertStateCosts) Err() error {
	return nil
}

func (q *Queries) BulkInsertStateCosts(ctx context.Context, arg []BulkInsertStateCostsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"states_cost"}, []string{"state", "air_cost", "bus_cost_inter", "bus_cost_intra", "motorcycle_cost", "water_cost"}, &iteratorForBulkInsertStateCosts{rows: arg})
}
